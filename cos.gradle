/**
 * Gradle Script for COS
 * It can be used to upload or download file from Tencent Cloud COS.
 * COS: https://cloud.tencent.com/document/product/436
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.qcloud:cos_api:5.4.6'
    }
}

import java.security.MessageDigest

import com.qcloud.cos.COSClient
import com.qcloud.cos.ClientConfig
import com.qcloud.cos.auth.BasicCOSCredentials
import com.qcloud.cos.auth.COSCredentials
import com.qcloud.cos.model.PutObjectRequest
import com.qcloud.cos.model.GetObjectRequest
import com.qcloud.cos.region.Region


String getKey(String filename) {
    String name = filename.substring(0, filename.lastIndexOf('.'))
    if (name.indexOf('-') == -1) return null
    if (filename.endsWith(".jar")) {
        return String.format(
                    "libraries/customskinloader/%s/%s/%s",
                    name.substring(0, name.indexOf('-')),
                    name.substring(name.indexOf('-') + 1).replace("-sources", ""),
                    filename
        )
    }
    return filename
}

ext.bucketName = System.getenv("COS_BUCKET")
ext.cosUrl = "https://csl.littleservice.cn/"
ext.cosClient0 = null

COSClient getCosClient() {
    if (cosClient0 != null) return cosClient0

    COSCredentials cred = new BasicCOSCredentials(System.getenv("COS_SECRET_ID"), System.getenv("COS_SECRET_KEY"))
    ClientConfig clientConfig = new ClientConfig(new Region("ap-shanghai"))
    cosClient0 = new COSClient(cred, clientConfig)
}

void uploadFile(String key, File file) {
    PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, key, file)
    getCosClient().putObject(putObjectRequest)
}

void uploadArtifacts(String shortVersion) {
    File dir = rootProject.file("build/libs")
    if (!dir.isDirectory()) return

    File[] files = dir.listFiles()
    for (file in files) {
        String key = getKey(file.getName())
        if (key == null) continue
        uploadFile(key, file)
        String url = cosUrl + key
        MessageDigest digest = MessageDigest.getInstance("SHA1")
        digest.update(file.getBytes())
        String sha1 = new BigInteger(1, digest.digest()).toString(16).padLeft(40, "0")
        String size = file.size().toString()
        println(String.format("lw-%s\t%s\n\t\t(sha1: %s, size: %s)", shortVersion, url, sha1, size))
    }
}

ext {
    uploadArtifacts = this.&uploadArtifacts
}